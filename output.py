# Form implementation generated from reading ui file 'Billing.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
import numpy as np
import openpyxl
import pandas as pd
import xlsxwriter
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Border, Font, PatternFill, Side
from PyQt6 import QtCore, QtGui, QtWidgets
import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QFileDialog, QLabel
from PyQt6.QtCore import Qt, QDate
import calendar

HOLIDAY_LIST = [
                    "01-01-2024",
                    "15-01-2024",
                    "26-01-2024",
                    "25-03-2024",
                    "29-03-2024",
                    "09-04-2024",
                    "11-04-2024",
                    "01-05-2024",
                    "13-05-2024",
                    "15-08-2024",
                    "02-10-2024",
                    "31-10-2024",
                    "25-12-2024"
                ]
            

def read_file(file_path):
    try:
        # Check file extension to determine how to read the file
        if file_path.endswith('.csv'):
            df = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            df = pd.read_excel(file_path)
        else:
            raise ValueError("Unsupported file format. Please provide a CSV or Excel file.")

        # Return the DataFrame if reading is successful
        return df.to_dict('records')

    except FileNotFoundError:
        print(f"Error: File not found at '{file_path}'")
    except Exception as e:
        print(f"Error reading file '{file_path}': {e}")

    # Return None if there is an error
    return None

def get_month_details(month_name, year):
    # Get the month number from the month name
    month_number = list(calendar.month_name).index(month_name.capitalize())

    # Get the calendar for the specified month and year
    cal = calendar.monthcalendar(year, month_number)

    # Dictionary to map weekday number to weekday name
    weekdays = {
        0: "Monday",
        1: "Tuesday",
        2: "Wednesday",
        3: "Thursday",
        4: "Friday",
        5: "Saturday",
        6: "Sunday",
    }

    month_details = []

    # Iterate through each week in the month
    for week in cal:
        week_details = []
        # Iterate through each day in the week
        for day in week:
            # If the day is zero, it means it's part of the previous or next month
            if day == 0:
                week_details.append(None)
            else:
                # Get the day name using the weekdays dictionary
                day_name = weekdays[calendar.weekday(year, month_number, day)]
                # Check if it's a weekend (Saturday or Sunday)
                is_weekend = day_name in ["Saturday", "Sunday"]
                # Append the day details to the week_details list
                week_details.append(
                    {"day": day, "day_name": day_name, "is_weekend": is_weekend}
                )
        # Append the week_details list to the month_details list
        month_details.append(week_details)

    return month_details, month_number

#add validation of month, like if use data is for april and month is may
def generate_excel(month, year, output_file_name, selected_row):
    sheets_name = []
    try:
        month_name = month
        holiday_list = HOLIDAY_LIST

        year = int(year)
        month_details, month_number = get_month_details(month_name, year)
        month_number = f"{month_number:02}" if month_number < 10 else month_number
        month_holiday_list = [x for x in holiday_list if re.findall(f"\d+-{month_number}-\d+", x)]
        print("month_holiday_list ===>", month_holiday_list)
        month_day_holiday_list = [k.split("-")[0] for k in month_holiday_list]
        print("month_day_holiday_list ===>", month_day_holiday_list)
        df_sheets = dict()
        excel_file_path = output_file_name
        # excel_file_path = "leave_management.xlsx"
        for new_data in selected_row:
            billable_days = 0
            weekends = 0
            total_working_days = 0
            data_model = []
            leave_taken = 0
            public_holiday = 0
            for week in month_details:
                for day in week:
                    if day:
                        date = day["day"]
                        is_weekend_or_leave = "Weekend" if day["is_weekend"] else ""
                        if day["is_weekend"]:
                            weekends += 1
                        else:
                            total_working_days += 1
                        dt = f"{date}-{month_name[:3]}"
                        day_name = f"{day['day_name']}"

                        key = (f"{day_name[:3]}, {f'{date:02}' if date < 10 else date}-"
                               f"{month_name[:3].title()}")
                        print("DAY ===>", f"{date:02}" if date < 10 else date)
                        # holiday_list = [j.split("-")[0] for j in holiday_list ]

                        if day["is_weekend"]:
                            dt_status = 0
                        else:
                            rounded_values = list(np.around(np.arange(2.5, 4, 0.1), decimals=1))

                            match new_data.get(key):
                                case 8:
                                    dt_status = 1
                                case 4:
                                    dt_status = 0.5
                                    leave_taken += 0.5
                                case value if value in rounded_values:
                                    dt_status = 0.25
                                    leave_taken += 0.25
                                case 0:
                                    if (f"{date:02}" if date < 10 else f"{date}") in month_day_holiday_list:
                                        public_holiday += 1
                                        dt_status = 0

                                        # for Holiday keyword to be added
                                        is_weekend_or_leave = "Public Holiday"
                                    else:
                                        leave_taken += 1
                                        dt_status = 0

                                        # for leave keyword to be added
                                        is_weekend_or_leave = "Leave"
                                case _:
                                    leave_taken += 1
                                    dt_status = 0  # print(dt_status)
                        billable_days += dt_status

                        """
                            (dt, day_name[:3], dt_status, is_weekend_or_leave, "", "", "", "")
                            ('1-Jun', 'Thu', 1, '', '', '', '', '')
                        """
                        data_model.append((dt, day_name[:3], dt_status, is_weekend_or_leave, "", "", "", "",))
            # print("BILLABLE ====>", billable_days)
            # print("WEEKENDS ====>", weekends)
            # print("TOTAL WORKING DAYS ====>", total_working_days)
            # print("LEAVE TAKEN ====>", leave_taken)

            data = {"Vendor Organization": ["Resource Name", "Month", "Date"],
                "Hitachi Vantara": [f"{new_data.get('Rsname')}", f"{month_name}", "Day", ],
                "Point of Contact": ["5-2-1", "Working Days", "Working Status"],
                "XXXXXXXX": ["YYYYYYYY", f"{total_working_days}", "Remarks"],
                "Adjustments from Last Month": ["", "", ""], "0": ["", "", ""], "": ["", "", ""],
                "Week Off": ["Personal/Sick Leave", "", ""], }
            df = pd.DataFrame(data)

            # Create a new sheet or get the existing one
            sheet_name = new_data.get("Rsname")

            for i in data_model:
                df.loc[len(df)] = i

            df.loc[len(df)] = ["Leaves Taken", f"{leave_taken}", "Billable Days", f"{billable_days}", "", "", "", "", ]

            df.loc[len(df)] = ["Weekends", f"{weekends}", "", "", "", "", "", ""]
            df.loc[len(df)] = ["Public Holidays", f"{public_holiday}", "", "", "", "", "", "", ]

            # print(df)
            df_sheets.update({sheet_name: df})
        else:
            # Create a Pandas Excel writer using XlsxWriter as the engine
            with pd.ExcelWriter(excel_file_path, engine="xlsxwriter") as writer:
                for key, value in df_sheets.items():
                    # Write each dataframe to a different sheet
                    value.to_excel(writer, sheet_name=key, index=False)

                # Access the XlsxWriter workbook and worksheet objects
                workbook = writer.book
                worksheets = writer.sheets

                # Access each worksheet and modify the formatting if needed
                for sheet_name, worksheet in worksheets.items():
                    # Example: set column width of the first column to 20
                    worksheet.set_column(0, 0, 20)
                    worksheet.set_column(1, 1, 20)
                    worksheet.set_column(2, 2, 20)
                    worksheet.set_column(3, 3, 15)
                    worksheet.set_column(4, 4, 30)
                    worksheet.set_column(7, 7, 17)

                    sheets_name.append(sheet_name)

            wb_style = load_workbook(excel_file_path)
            border = Border(left=Side(border_style="thin"), right=Side(border_style="thin"),
                top=Side(border_style="thin"), bottom=Side(border_style="thin"), )
            for i in sheets_name:
                sheet = wb_style[i]

                for row in sheet.iter_rows():
                    for cell in row:
                        cell.border = border
                        if cell.value == "Weekend":
                            numbers = re.findall(r"\d+", cell.coordinate)[0]
                            cell_list = [f"B{numbers}", f"C{numbers}", f"D{numbers}", ]
                            for k in cell_list:
                                cell_bold = sheet[k]
                                cell_bold.fill = PatternFill(start_color="b6bbbf", end_color="b6bbbf",
                                    fill_type="solid", )  # grey color
                        if cell.value == "Leave":
                            cell_bold = sheet[cell.coordinate]
                            cell_bold.fill = PatternFill(start_color="fce1dc", end_color="fce1dc",
                                fill_type="solid", )  # red color

                        if cell.value == "Public Holiday":
                            cell_bold = sheet[cell.coordinate]
                            cell_bold.fill = PatternFill(start_color="cffccf", end_color="cffccf",
                                fill_type="solid", )  # green color

                        if cell.value in ["Leaves Taken", "Weekends", "Public Holidays", "Billable Days", ]:
                            cell_bold = sheet[cell.coordinate]
                            cell_bold.font = Font(bold=True, color="FFFFFF")
                            cell_bold.fill = PatternFill(start_color="4d6c82", end_color="4d6c82", fill_type="solid", )

                for j in ["B1", "D1", "H1", "F1"]:
                    cell_bold = sheet[j]
                    cell_bold.font = Font(bold=False)

                for j in ["A1", "C1", "E1", "A2", "C2", "A3", "C3", "A4", "B4", "C4", "D4", "G1", "G2", ]:
                    cell_bold = sheet[j]
                    cell_bold.font = Font(bold=True)
                    if j == "G2":
                        cell_bold.fill = PatternFill(start_color="fce1dc", end_color="fce1dc",
                            fill_type="solid", )  # red color
                    else:
                        cell_bold.fill = PatternFill(start_color="b6bbbf", end_color="b6bbbf",
                            fill_type="solid", )  # grey color

                for j in ["A4", "B4", "C4", "D4", "E4", "F4"]:
                    cell_bold = sheet[j]
                    cell_bold.font = Font(bold=True, color="FFFFFF")
                    cell_bold.fill = PatternFill(start_color="4d6c82", end_color="4d6c82", fill_type="solid")

                for k in [chr(i) + f"{j}" for i in range(65, 73) for j in range(1, 5)]:
                    cell = sheet[k]
                    cell.alignment = Alignment(horizontal="left")

                for k in [f"A{j}" for j in range(5, 40)]:
                    cell = sheet[k]

                    cell.alignment = Alignment(horizontal="center")

                for k in [f"C{j}" for j in range(5, 40)]:
                    cell = sheet[k]

                    if cell.value == "Billable Days":
                        global range_limit
                        range_limit = int(re.findall(r"\d+", cell.coordinate)[0])
                        break

                    cell.alignment = Alignment(horizontal="center")

                for k in [i + f"{j}" for i in ["B", "D"] for j in range(5, 40)]:
                    cell = sheet[k]

                    if cell.coordinate == f"D{range_limit}":
                        cell.font = Font(bold=True)

                    cell.alignment = Alignment(horizontal="center")

            else:
                wb_style.save(excel_file_path)

        return [200, "Report Generated Successfully."]

    except Exception as e:
        # Log the error
        print(f"An error occurred: {str(e)}")
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)

        return [500, str(e)]


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(591, 520)
        MainWindow.setFixedSize(591, 520)

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(12)
        font.setBold(True)

        self.groupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 120, 551, 271))
        font = QtGui.QFont()
        font.setBold(False)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("")
        self.groupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox.setFlat(True)
        self.groupBox.setCheckable(False)
        self.groupBox.setObjectName("groupBox")
#         self.groupBox.setStyleSheet("border-style: solid;\n"
# "border-width: 1px;\n"
# "border-color: rgb(17, 131, 112);\n"
# "border-radius: 5px;")

        ################################### Output File Section #####################################################
        self.fileInputBox = QtWidgets.QGroupBox(parent=self.groupBox)
        self.fileInputBox.setGeometry(QtCore.QRect(10, 20, 541, 61))
        self.fileInputBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.fileInputBox.setObjectName("fileInputBox")
        font.setPointSize(10)

        self.inputFileText = QtWidgets.QPlainTextEdit(parent=self.fileInputBox)
        self.inputFileText.setEnabled(True)
        self.inputFileText.setGeometry(QtCore.QRect(10, 20, 421, 31))
        self.inputFileText.setReadOnly(True)
        self.inputFileText.setObjectName("inputFileText")
        self.inputFileText.setFont(font)

        self.uploadButton = QtWidgets.QPushButton(parent=self.fileInputBox)
        self.uploadButton.setGeometry(QtCore.QRect(440, 20, 91, 31))
        self.uploadButton.setToolTip("")
        icon = QtGui.QIcon.fromTheme("folder")
        self.uploadButton.setIcon(icon)
        self.uploadButton.setObjectName("uploadButton")
        ####################################################### END ############################################################

        ################################### Output File Section #####################################################
        self.outputFileBox = QtWidgets.QGroupBox(parent=self.groupBox)
        self.outputFileBox.setGeometry(QtCore.QRect(10, 160, 541, 61))
        self.outputFileBox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.outputFileBox.setObjectName("outputFileBox")

        self.outputFileText = QtWidgets.QPlainTextEdit(parent=self.outputFileBox)
        self.outputFileText.setEnabled(True)
        self.outputFileText.setGeometry(QtCore.QRect(10, 20, 405, 31))
        self.outputFileText.setObjectName("outputFileText")

        self.generateButton = QtWidgets.QPushButton(parent=self.outputFileBox)
        self.generateButton.setGeometry(QtCore.QRect(440, 20, 91, 31))
        self.generateButton.setObjectName("generateButton")

        ####################################################### END ############################################################

        self.error_msg = QtWidgets.QLabel(parent=self.groupBox)
        self.error_msg.setGeometry(QtCore.QRect(20, 230, 521, 20))
        self.error_msg.setText("")
        self.error_msg.setObjectName("error_msg")
        self.error_msg.setStyleSheet("color:red;")
        self.error_msg.setFont(font)

        ################################### Selection of Year and Month box #####################################################
        self.year_month_box = QtWidgets.QGroupBox(parent=self.groupBox)
        self.year_month_box.setGeometry(QtCore.QRect(10, 90, 541, 71))
        self.year_month_box.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.year_month_box.setObjectName("year_month_box")

        self.monthBox = QtWidgets.QComboBox(parent=self.year_month_box)
        self.monthBox.setGeometry(QtCore.QRect(10, 20, 341, 40))
        self.monthBox.setEditable(True)
        self.monthBox.setObjectName("monthBox")
        months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October",
                  "November", "December"]
        self.monthBox.addItems(months)
        # Set default month to current month
        currentMonthIndex = QDate.currentDate().month() - 1  # Month indices start from 0
        self.monthBox.setCurrentIndex(currentMonthIndex)

        self.yearBox = QtWidgets.QComboBox(parent=self.year_month_box)
        self.yearBox.setGeometry(QtCore.QRect(370, 20, 150, 40))
        self.yearBox.setEditable(True)
        self.yearBox.setObjectName("yearBox")
        years = [str(year) for year in range(2022, 2051)]  # Years from 2022 to 2050
        self.yearBox.addItems(years)
        # Set default year to current year
        currentYear = QDate.currentDate().year()
        yearIndex = self.yearBox.findText(str(currentYear))
        if yearIndex != -1:
            self.yearBox.setCurrentIndex(yearIndex)
        
        ####################################################### END ############################################################

        ##################################################### Category box #####################################################
        
        self.categoryBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.categoryBox.setGeometry(QtCore.QRect(20, 20, 541, 80))
        self.categoryBox.setStyleSheet("border-style: solid;\n"
"border-width: 1px;\n"
"border-color: rgb(17, 131, 112);\n"
"border-radius: 5px;")
        self.categoryBox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.categoryBox.setObjectName("categoryBox")

        self.categoryInput = QtWidgets.QPlainTextEdit(parent=self.categoryBox)
        self.categoryInput.setEnabled(True)
        self.categoryInput.setGeometry(QtCore.QRect(10, 30, 381, 31))
        self.categoryInput.setReadOnly(False)
        self.categoryInput.setObjectName("categoryInput")

        self.selectButton = QtWidgets.QPushButton(parent=self.categoryBox)
        self.selectButton.setGeometry(QtCore.QRect(400, 30, 130, 31))
        self.selectButton.setObjectName("selectButton")

        ####################################################### END ############################################################

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.generateButton.setStyleSheet(
            "background-color: #aae0a4; color: black; border-radius: 5px; border: 2px solid #aae0a4;")
        self.uploadButton.setStyleSheet(
            "background-color: #ffe0a1; color: black; border-radius: 5px; border: 2px solid #ffe0a1;")
        self.selectButton.setStyleSheet(
            "background-color: #a9d2d9; color: black; border-radius: 5px; border: 2px solid #a9d2d9;")

        self.holidayBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.holidayBox.setGeometry(QtCore.QRect(20, 410, 551, 80))
        self.holidayBox.setObjectName("holidayBox")

        self.holidayLabel = QtWidgets.QLabel(parent=self.holidayBox)
        self.holidayLabel.setGeometry(QtCore.QRect(10, 60, 421, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.holidayLabel.setFont(font)
        self.holidayLabel.setStyleSheet("color:red;")
        self.holidayLabel.setObjectName("holidayLabel")

        self.plainTextEdit = QtWidgets.QPlainTextEdit(parent=self.holidayBox)
        self.plainTextEdit.setGeometry(QtCore.QRect(20, 30, 371, 31))
        self.plainTextEdit.setObjectName("plainTextEdit")

        self.holidayListButton = QtWidgets.QPushButton(parent=self.holidayBox)
        self.holidayListButton.setGeometry(QtCore.QRect(400, 30, 141, 31))
        self.holidayListButton.setObjectName("holidayListButton")

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # self.label.setText(_translate("MainWindow", "Please enter raw attendance file to generate Attendance Billing Report"))
        self.groupBox.setTitle(
            _translate("MainWindow", "Please enter raw attendance file to generate Attendance Billing Report"))
        self.generateButton.setText(_translate("MainWindow", "Generate"))
        self.uploadButton.setText(_translate("MainWindow", "Upload"))
        self.outputFileBox.setTitle(_translate("MainWindow", "Enter Output File name"))
        self.year_month_box.setTitle(_translate("MainWindow", "Select Month and Year :"))
        self.outputFileText.setPlainText(_translate("MainWindow", "Sample.xlsx"))
        self.fileInputBox.setTitle(_translate("MainWindow", "File Input"))
        self.error_msg.setText(_translate("MainWindow", ""))

        self.categoryBox.setTitle(_translate("MainWindow", "Upload a category file to classify the report(Optional)"))
        self.selectButton.setText(_translate("MainWindow", "Select"))
        self.holidayBox.setTitle(_translate("MainWindow", "Upload Holiday List for Client( **xlsx format only )"))
        self.holidayLabel.setText(_translate("MainWindow", "** Currently Data is load for 2024"))
        self.holidayListButton.setText(_translate("MainWindow", "Holiday List"))

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set up the user interface from Designer.
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.df = None
        # Connect your buttons to functions
        self.ui.uploadButton.clicked.connect(self.uploadFile)
        self.ui.generateButton.clicked.connect(self.generateReport)
        self.ui.selectButton.clicked.connect(self.selectCategory)


    def uploadFile(self):
        self.ui.error_msg.setText("")
        file_dialog = QFileDialog(self)
        filepath, _ = file_dialog.getOpenFileName(self, "Open Excel File", "", "Excel Files (*.xlsx *.xls, *.csv)")

        if filepath:
            fileInfo = QtCore.QFileInfo(filepath)
            file_name = fileInfo.fileName()
            file_size = fileInfo.size()  # in bytes
            # Convert file size to kilobytes
            file_size_kb = file_size / 1024.0
            print(f"File Name: {file_name}, File Size: {file_size_kb:.2f} KB")

            # Create DataFrame with Pandas
            self.df = read_file(filepath)

            # Update input text box with filename and size
            self.ui.inputFileText.setPlainText(f"{file_name} ({file_size_kb:.2f} KB)")

    def clean_keys(self, dict_list):
        cleaned_list = []
        for data_dict in dict_list:
            cleaned_dict = {}
            for key, value in data_dict.items():
                # Clean the key by removing '\n' and extra spaces
                clean_key = key.replace('\n', ' ').strip()
                cleaned_dict[clean_key] = value
            cleaned_list.append(cleaned_dict)
        return cleaned_list
    
    def generateReport(self):
        # Implement report generation logic here
        self.selected_month = self.ui.monthBox.currentText()
        self.selected_year = self.ui.yearBox.currentText()

        if self.df:
            self.df = self.clean_keys(self.df)
            status, response = generate_excel(self.selected_month, self.selected_year, self.ui.outputFileText.toPlainText(), self.df)
            if status ==  200:
                self.ui.error_msg.setText(response)
                self.ui.error_msg.setStyleSheet("color:green;")
            else:
                self.ui.error_msg.setText(response)
                self.ui.error_msg.setStyleSheet("color:red;")
        else:
            self.ui.error_msg.setText("Please provide raw excel file as an input.")

        print("DOne")

    def selectCategory(self):
        # Implement category selection logic here
        pass

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())